namespace Terrasoft.Configuration
{

	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;
	using Terrasoft.Common;
	using Terrasoft.Core;
	using Terrasoft.Core.Configuration;

	#region Class: EmailAddressSchema

	/// <exclude/>
	public class EmailAddressSchema : Terrasoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public EmailAddressSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public EmailAddressSchema(EmailAddressSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("8f82b21b-805d-4119-96db-e57d6168ef63");
			Name = "EmailAddress";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("5f5fe385-d25b-4c17-9585-cfaff007abaf");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,4,0,229,86,81,107,219,48,16,126,110,161,255,225,72,95,18,8,206,251,210,116,140,174,148,62,116,148,166,111,163,4,197,58,167,130,88,50,210,185,91,22,246,223,119,146,18,199,118,147,53,201,6,219,216,139,133,238,238,59,125,250,238,44,73,139,28,93,33,82,132,71,180,86,56,147,81,114,101,116,166,102,165,21,164,140,78,174,174,199,119,70,226,220,157,157,46,207,78,79,74,167,244,12,198,11,71,152,15,91,243,228,161,212,164,114,76,198,104,149,152,171,111,33,3,71,113,220,185,197,25,79,224,106,46,156,123,7,215,185,80,243,15,82,90,116,46,248,7,131,1,92,184,50,207,133,93,92,174,230,143,207,8,232,3,65,196,200,100,29,56,168,69,126,254,40,72,48,103,178,34,165,39,54,20,229,116,174,82,72,253,74,173,133,78,150,97,177,13,27,163,29,217,50,37,99,153,212,125,0,198,136,54,159,96,184,213,138,194,198,208,129,0,141,95,64,49,94,104,150,207,100,64,76,247,194,33,66,106,49,27,117,234,43,119,96,112,25,9,37,85,242,250,30,214,156,235,152,110,15,150,240,253,143,176,9,150,66,88,145,131,230,6,25,117,66,21,58,149,175,42,76,13,31,194,119,238,133,85,246,125,18,64,188,47,31,118,66,207,202,37,177,190,163,232,25,6,187,95,146,45,17,146,92,231,5,45,130,227,47,209,66,201,141,16,183,210,167,183,152,170,66,161,166,173,114,252,126,49,111,74,37,65,201,62,236,84,149,253,35,142,24,254,203,58,31,36,211,43,180,255,54,193,222,114,84,191,86,58,251,12,111,53,111,176,175,148,245,195,127,169,232,43,44,45,138,22,214,91,126,189,26,213,196,167,59,170,52,209,234,225,108,245,67,189,96,231,168,101,188,41,154,215,198,189,53,5,90,82,184,207,165,113,131,228,192,88,112,126,84,59,15,140,58,44,92,105,119,152,79,209,118,63,69,194,254,216,233,61,213,4,90,29,2,124,71,204,144,134,62,251,240,167,183,69,131,6,109,41,253,91,4,98,247,52,56,212,235,114,60,145,86,27,189,197,35,244,225,54,26,161,180,251,178,240,61,248,140,66,162,13,85,7,50,80,58,132,140,137,121,78,85,133,250,32,49,19,229,220,115,53,208,33,211,1,149,129,54,4,133,53,47,74,162,92,103,52,26,77,214,37,211,135,52,237,195,52,77,123,251,239,41,252,31,219,246,20,184,29,95,226,175,133,138,207,56,144,130,170,3,133,159,124,78,204,14,209,124,147,104,226,19,53,169,114,60,62,242,179,239,61,180,194,246,38,254,128,5,39,18,220,206,7,112,178,17,52,217,250,99,108,156,199,171,87,245,0,11,102,103,8,47,194,30,66,47,45,104,18,128,19,6,54,41,54,125,237,233,22,194,173,131,40,90,155,70,182,253,0,115,111,24,78,205,11,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("8f82b21b-805d-4119-96db-e57d6168ef63"));
		}

		#endregion

	}

	#endregion

}

